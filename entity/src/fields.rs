//! SeaORM Entity. Generated by sea-orm-codegen 0.4.2

use poem_openapi::Enum;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "fields")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub schema_id: String,
    pub identifier: String,
    pub data_type: DataType,
    pub comment: String,
    pub unit: String,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: Option<DateTimeWithTimeZone>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::schemas::Entity",
        from = "Column::SchemaId",
        to = "super::schemas::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Schemas,
}

impl Related<super::schemas::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Schemas.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(EnumIter, DeriveActiveEnum, Clone, Debug, PartialEq, Enum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "data_type")]
pub enum DataType {
    #[sea_orm(string_value = "string")]
    String,
    #[sea_orm(string_value = "number")]
    Number,
    #[sea_orm(string_value = "integer")]
    Integer,
    #[sea_orm(string_value = "boolean")]
    Boolean,
    #[sea_orm(string_value = "time")]
    Time,
}
