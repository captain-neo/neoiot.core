//! SeaORM Entity. Generated by sea-orm-codegen 0.4.2

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "accounts")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub email: String,
    pub password: String,
    pub name: String,
    pub is_superuser: bool,
    pub last_login_at: Option<DateTimeWithTimeZone>,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: Option<DateTimeWithTimeZone>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::mappings::Entity")]
    Mappings,
    #[sea_orm(has_many = "super::devices::Entity")]
    Devices,
}

impl Related<super::mappings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Mappings.def()
    }
}

impl Related<super::devices::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Devices.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

use chrono::{DateTime, Local};
use poem_openapi::{
    types::{Email, Password},
    Object,
};

#[derive(Debug, Object, Clone, Eq, PartialEq)]
pub struct AccountResp {
    pub id: String,
    /// 账户唯一邮箱
    pub email: Email,
    /// 账户名称
    pub name: String,
    /// 是否超级用户
    pub is_superuser: bool,
    /// 上次登录时间
    pub last_login_at: Option<DateTime<Local>>,
    /// 账户创建时间
    pub created_at: DateTime<Local>,
}

impl From<Model> for AccountResp {
    fn from(obj: Model) -> Self {
        Self {
            id: obj.id,
            email: Email(obj.email),
            name: obj.name,
            is_superuser: obj.is_superuser,
            last_login_at: obj.last_login_at.map(|v| v.into()),
            created_at: obj.created_at.into(),
        }
    }
}

#[derive(Debug, Object, Clone, Eq, PartialEq)]
pub struct AccountCreateReq {
    /// 账户唯一邮箱
    pub email: Email,
    /// 账户名称
    #[oai(validator(min_length = 3, max_length = 64))]
    pub name: String,
    /// 账户密码
    #[oai(validator(min_length = 8))]
    pub password: Password,
    pub is_super: bool,
}

#[derive(Debug, Object, Clone, Eq, PartialEq)]
pub struct AccountUpdateReq {
    /// 账户唯一邮箱
    pub email: Option<Email>,
    /// 账户名称
    pub name: Option<String>,
    /// 账户密码
    pub password: Option<Password>,
}

#[derive(Debug, Object, Clone, Eq, PartialEq)]
pub struct AccountListResp {
    /// 数据列表
    pub results: Vec<AccountResp>,
    /// 总数
    pub total: usize,
}

#[derive(Debug, Object, Clone, Eq, PartialEq)]
pub struct Login {
    pub email: String,
    pub password: String,
}

#[derive(Debug, Object, Clone, Eq, PartialEq)]
pub struct LoginResp {
    pub token: String,
}
