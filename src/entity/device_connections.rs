//! SeaORM Entity. Generated by sea-orm-codegen 0.4.2

use poem_openapi::Object;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "device_connections")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub connected: bool,
    pub client_id: String,
    pub node: String,
    pub keep_alive: String,
    pub ip_address: String,
    pub proto_ver: i64,
    pub connected_at: DateTimeWithTimeZone,
    pub disconnected_at: DateTimeWithTimeZone,
    pub disconnected_reason: String,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: Option<DateTimeWithTimeZone>,
    pub device_id: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::devices::Entity",
        from = "Column::DeviceId",
        to = "super::devices::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Devices,
}

impl Related<super::devices::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Devices.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Debug, Object, Clone, Eq, PartialEq)]
pub struct DeviceConnectionResp {
    pub id: String,
    /// 所属设备原因
    pub device_id: String,
    /// 连接状态
    pub connected: bool,
    /// client_id
    pub client_id: String,
    /// 连接节点
    pub node: String,
    pub keep_alive: String,
    /// IP地址`
    pub ip_address: String,
    /// 协议版本
    pub proto_ver: i64,
    /// 连接时间
    pub connected_at: DateTimeWithTimeZone,
    /// 断开连接的时间
    pub disconnected_at: DateTimeWithTimeZone,
    /// 断开连接原因
    pub disconnected_reason: String,
}
impl From<Model> for DeviceConnectionResp {
    fn from(model: Model) -> Self {
        Self {
            id: model.id,
            device_id: model.device_id,
            connected: model.connected,
            client_id: model.client_id,
            node: model.node,
            keep_alive: model.keep_alive,
            ip_address: model.ip_address,
            proto_ver: model.proto_ver,
            connected_at: model.connected_at,
            disconnected_at: model.disconnected_at,
            disconnected_reason: model.disconnected_reason,
        }
    }
}

#[derive(Debug, Object, Clone, Eq, PartialEq)]
pub struct DeviceConnectionsListResp {
    total: usize,
    results: Vec<DeviceConnectionResp>,
}
impl From<(Vec<Model>, usize)> for DeviceConnectionsListResp {
    fn from(tuple: (Vec<Model>, usize)) -> Self {
        let (models, total) = tuple;
        Self {
            total,
            results: models.into_iter().map(Into::into).collect(),
        }
    }
}
