//! SeaORM Entity. Generated by sea-orm-codegen 0.4.2

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "devices")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub account_id: String,
    pub mapping_id: String,
    pub name: String,
    pub label_version: i64,
    pub is_active: bool,
    pub is_online: bool,
    pub mqtt_username: String,
    pub mqtt_password: String,
    pub is_super_device: bool,
    pub acl_pubs: Json,
    pub acl_subs: Json,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: Option<DateTimeWithTimeZone>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::accounts::Entity",
        from = "Column::AccountId",
        to = "super::accounts::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Accounts,
    #[sea_orm(
        belongs_to = "super::mappings::Entity",
        from = "Column::MappingId",
        to = "super::mappings::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Mappings,
    #[sea_orm(has_many = "super::labels::Entity")]
    Labels,
    #[sea_orm(has_many = "super::command_request_logs::Entity")]
    CommandRequestLogs,
    #[sea_orm(has_many = "super::device_connections::Entity")]
    DeviceConnections,
}

impl Related<super::accounts::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Accounts.def()
    }
}

impl Related<super::mappings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Mappings.def()
    }
}

impl Related<super::labels::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Labels.def()
    }
}

impl Related<super::command_request_logs::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CommandRequestLogs.def()
    }
}

impl Related<super::device_connections::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::DeviceConnections.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

use chrono::{DateTime, Local};
use poem_openapi::Object;

use super::{labels, mappings};
pub struct ModelWithRelated {
    pub device: Model,
    pub labels: Vec<labels::Model>,
    pub mapping: mappings::Model,
}

#[derive(Debug, Object, Clone, Eq, PartialEq)]
pub struct DeviceResp {
    /// 设备ID
    pub id: String,
    /// 设备名称
    pub name: String,
    /// 设备标签列表
    pub labels: Vec<labels::LabelResp>,
    /// 映射集
    pub mapping: mappings::MappingResp,
    /// 设备是否激活
    pub is_active: bool,
    /// 设备是否在线
    pub is_online: bool,
    /// 设备创建时间
    pub created_at: DateTime<Local>,
}

impl From<ModelWithRelated> for DeviceResp {
    fn from(obj: ModelWithRelated) -> Self {
        DeviceResp {
            id: obj.device.id,
            name: obj.device.name,
            labels: obj.labels.into_iter().map(|x| x.into()).collect(),
            mapping: obj.mapping.into(),
            is_active: obj.device.is_active,
            is_online: obj.device.is_online,
            created_at: obj.device.created_at.into(),
        }
    }
}

#[derive(Debug, Object, Clone, Eq, PartialEq)]
pub struct DeviceSimpleResp {
    /// 设备ID
    pub id: String,
    /// 设备名称
    pub name: String,
    /// 映射集ID
    pub mapping_id: String,
    /// 设备是否激活
    pub is_active: bool,
    /// 设备是否在线
    pub is_online: bool,
    /// 设备创建时间
    pub created_at: DateTime<Local>,
}
impl From<Model> for DeviceSimpleResp {
    fn from(obj: Model) -> Self {
        DeviceSimpleResp {
            id: obj.id,
            name: obj.name,
            mapping_id: obj.mapping_id.to_string(),
            is_active: obj.is_active,
            is_online: obj.is_online,
            created_at: obj.created_at.into(),
        }
    }
}

#[derive(Debug, Object, Clone, Eq, PartialEq)]
pub struct DeviceCreateReq {
    /// 设备名称
    pub name: String,
    /// 映射集ID
    pub mapping_id: String,
    /// 标签列表
    pub labels: Vec<String>,
    /// 设备MQTT连接密码
    pub mqtt_password: String,
}

#[derive(Debug, Object, Clone, Eq, PartialEq)]
pub struct DeviceUpdateReq {
    /// 设备名称
    pub name: Option<String>,
    /// 设备激活状态ID
    pub is_active: Option<bool>,
    /// 设备标签
    pub labels: Option<Vec<String>>,
    /// 映射集
    pub mapping_id: Option<String>,
}

#[derive(Debug, Object, Clone, Eq, PartialEq)]
pub struct DeviceListResp {
    /// 数据列表
    pub results: Vec<DeviceSimpleResp>,
    /// 总数
    pub total: usize,
}
