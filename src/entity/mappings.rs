//! SeaORM Entity. Generated by sea-orm-codegen 0.4.2

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "mappings")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub name: String,
    pub account_id: String,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: Option<DateTimeWithTimeZone>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::accounts::Entity",
        from = "Column::AccountId",
        to = "super::accounts::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Accounts,
    #[sea_orm(has_many = "super::properties::Entity")]
    Properties,
    #[sea_orm(has_many = "super::devices::Entity")]
    Devices,
}

impl Related<super::accounts::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Accounts.def()
    }
}

impl Related<super::properties::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Properties.def()
    }
}

impl Related<super::devices::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Devices.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

use chrono::{DateTime, Local};
use poem_openapi::Object;

use super::properties;

#[derive(Debug, Object, Clone, Eq, PartialEq)]
pub struct MappingResp {
    pub id: String,
    /// 映射集名称
    pub name: String,
    /// 映射集创建时间
    pub created_at: DateTime<Local>,
}

impl From<Model> for MappingResp {
    fn from(obj: Model) -> Self {
        Self {
            id: obj.id,
            name: obj.name,
            created_at: obj.created_at.into(),
        }
    }
}

pub struct ModelWithRelated {
    pub mapping: Model,
    pub properties: Vec<properties::Model>,
}
pub struct MappingDetailResp {
    pub id: String,
    /// 映射集名称
    pub name: String,
    /// 映射集创建时间
    pub created_at: DateTime<Local>,
    /// 属性
    pub properties: Vec<properties::PropertyResp>,
}

impl From<ModelWithRelated> for MappingDetailResp {
    fn from(obj: ModelWithRelated) -> Self {
        Self {
            id: obj.mapping.id,
            name: obj.mapping.name,
            created_at: obj.mapping.created_at.into(),
            properties: obj.properties.into_iter().map(|x| x.into()).collect(),
        }
    }
}

#[derive(Debug, Object, Clone, Eq, PartialEq)]
pub struct MappingCreateReq {
    /// 映射集名称
    #[oai(validator(min_length = 3, max_length = 64))]
    pub name: String,
}

#[derive(Debug, Object, Clone, Eq, PartialEq)]
pub struct MappingUpdateReq {
    /// 账户名称
    pub name: Option<String>,
}

#[derive(Debug, Object, Clone, Eq, PartialEq)]
pub struct MappingListResp {
    /// 数据列表
    pub results: Vec<MappingResp>,
    /// 总数
    pub total: usize,
}

#[derive(Debug, Object, Clone, Eq, PartialEq)]
pub struct Login {
    pub email: String,
    pub password: String,
}

#[derive(Debug, Object, Clone, Eq, PartialEq)]
pub struct LoginResp {
    pub token: String,
}
